apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }

    def isRelease = gradle.startParameter.taskNames.any { it.contains('assemblerelease') }

    signingConfigs {
        release {
            if (isRelease) {
                def fileKey = project.rootProject.file('key.properties')
                if (!fileKey.exists()) {
                    throw new RuntimeException("----------> 'key.properties' not exists")
                }
                Properties properties = new Properties()
                properties.load(fileKey.newDataInputStream())

                def path = properties.getProperty("keystore.path");
                def password = properties.getProperty("keystore.password");
                def alias = properties.getProperty("keystore.alias");

                storeFile file(path)
                storePassword password
                keyAlias alias
                keyPassword password

            }
        }

        debug {
            def fileKey = project.rootProject.file('key.properties')
            if (fileKey.exists()) {
                Properties properties = new Properties()
                properties.load(fileKey.newDataInputStream())

                def path = properties.getProperty("keystore.path");
                def password = properties.getProperty("keystore.password");
                def alias = properties.getProperty("keystore.alias");

                storeFile file(path)
                storePassword password
                keyAlias alias
                keyPassword password
            }


        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            if (isRelease) {
                signingConfig signingConfigs.release
            }
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            pseudoLocalesEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }

        debug{
            buildConfigField "boolean", "LOG_DEBUG", "true"
            def fileKey = project.rootProject.file('key.properties')
            if (fileKey.exists()) {
                signingConfig signingConfigs.debug
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            shrinkResources false
            zipAlignEnabled false
            pseudoLocalesEnabled false
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["constraint-layout"]
    compile rootProject.ext.dependencies["recyclerview-v7"]
    compile rootProject.ext.dependencies["design"]
    //dagger
    compile rootProject.ext.dependencies["dagger"]
    apt rootProject.ext.dependencies["dagger-compiler"]
    provided rootProject.ext.dependencies["javax.annotation-api"]
    //ButterKnife
    compile rootProject.ext.dependencies["butterknife"]
    apt rootProject.ext.dependencies["butterknife-compiler"]
    //okhttp
    compile rootProject.ext.dependencies["okhttp3"]
    //retrofit2
    compile rootProject.ext.dependencies["retrofit"]
    compile rootProject.ext.dependencies["adapter-rxjava"]
    compile rootProject.ext.dependencies["converter-gson"]
    compile rootProject.ext.dependencies["fastjson"]
    //rxandroid
    compile rootProject.ext.dependencies["rxandroid"]
    compile rootProject.ext.dependencies["rxbinding"]
    compile rootProject.ext.dependencies["rxjava"]
    //fresco
    compile rootProject.ext.dependencies["fresco"]
    compile rootProject.ext.dependencies["imagepipeline-okhttp3"]
    compile rootProject.ext.dependencies["animated-gif"]
    //picasso
    compile rootProject.ext.dependencies["picasso"]
    compile project(':update')

    compile rootProject.ext.dependencies["umeng"]
}
